# This script is part of the OEDGE tutorial found on the AME Sharepoint here. We take a background generated by OEDGE
# for the LSN L-Mode discharge 167196 and compare it to some of the available diagnostics.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pickle
from scipy.interpolate import griddata
import netCDF4
import oedge_plots

# Set to the directory with all the OEDGE tutorial data in it (including the .nc and .dat files).
root = "/Users/zamperini/Documents/d3d_work/divimp_files/oedge_tutorial/"
filename = "d3d-167196-bg-shifted-ring-entry-13-offswitches"


def load_rcp(shift=0.00):
    """
    Load RCP data for 167194 and 167195, which were repeat discharges of 167196 so the data applies. We perform the
    additional step of mapping the coordinates to psin.

    shift (float): Shift the RCP data in R by this amount (m).
    """
    data = {"r": np.array([]), "te": np.array([]), "ne": np.array([])}
    for plunge in ["MP167194_1", "MP167194_2", "MP167195_1", "MP167195_2"]:
        rcp = pd.read_csv(root + plunge + ".tab", delimiter="\t")
        data["r"] = np.append(data["r"], rcp["R(cm)"].to_numpy() / 100 + shift)
        data["te"] = np.append(data["te"], rcp["Te(eV)"].to_numpy())
        data["ne"] = np.append(data["ne"], rcp["Ne(E18 m-3)"].to_numpy() * 1e18)

    # Map to psin by interpolating onto the equilibrium.
    with open(root + "167196_3500.pickle", "rb") as f:
        gfile = pickle.load(f)
    R = gfile["R"]
    Z = gfile["Z"]
    Rs, Zs = np.meshgrid(R, Z)
    psin = gfile["PSIRZ_NORM"]
    rcp_coord = zip(data["r"], np.full(len(data["r"]), -0.185))
    data["psin"] = griddata((Rs.flatten(), Zs.flatten()), psin.flatten(), list(rcp_coord))

    return data


def load_ts(shift=0.00):
    """
    Load Thomson scattering data from the OMFITprofiles output.

    shift (float): Shift the TS data in psin space by this amount due to uncertainty in the separatrix location.
    """
    ts = netCDF4.Dataset(root + "OMFITprofiles_167196_FIT.nc")
    data = {"psin": ts["psi_n"][:] + shift, "ne": ts["n_e"][:].mean(axis=0), "te": ts["T_e"][:].mean(axis=0)}
    return data


# Load the OEDGE data into an OedgePlots class object, which contains all the plotting functionality.
op = oedge_plots.OedgePlots(root + filename + ".nc")

# Load rcp and TS data. Shifts are applied due to uncertainty in the separatrix and RCP location. The shifts are to
# bring the data of each into better agreement before comparing to OEDGE data.
rcp = load_rcp(shift=-0.01)
ts = load_ts(shift=0.02)

# Extract profiles of ne and Te at the locations of TS and the RCP.
numlocs = 100
rings_only = False  # Turn on for highest resolution, takes a while to run...
print("\nRCP ne")
op_ne_rcp = op.fake_probe(2.12, 2.37, -0.188, -0.188, data="ne", show_plot=False, plot="psin", num_locs=numlocs,
                          rings_only=rings_only)
print("\nRCP Te")
op_te_rcp = op.fake_probe(2.20, 2.37, -0.188, -0.188, data="Te", show_plot=False, plot="psin", num_locs=numlocs,
                          rings_only=rings_only)
print("\nTS ne")
op_ne_ts = op.fake_probe(1.94, 1.94, 0.60, 0.90, data="ne", show_plot=False, plot="psin", num_locs=numlocs,
                         rings_only=rings_only)
print("\nTS Te")
op_te_ts = op.fake_probe(1.94, 1.94, 0.60, 0.90, data="Te", show_plot=False, plot="psin", num_locs=numlocs,
                         rings_only=rings_only)

# Plotting comparison.
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(8, 7), sharex=True)

for ax in [ax1, ax2, ax3, ax4]:
    ax.axvline(1.0, color="k")

# RCP ne plot.
ax1.scatter(rcp["psin"], rcp["ne"], marker="^", color="tab:purple", edgecolors="k", s=75, zorder=10)
ax1.plot(op_ne_rcp["psin"], op_ne_rcp["ne"], color="k", zorder=15, lw=3)
ax1.plot(op_ne_rcp["psin"], op_ne_rcp["ne"], color="tab:purple", zorder=20, lw=2)
ax1.set_xlim([0.9, 1.3])
ax1.set_ylim([0, 3e19])
ax1.grid(zorder=5)
ax1.set_ylabel(r"$\mathdefault{n_e\ (m^{-3})}$", fontsize=14)
ax1.set_title("RCP", fontsize=14)

# TS ne plot.
ax2.plot(ts["psin"], ts["ne"], color="tab:purple")
ax2.plot(op_ne_ts["psin"], op_ne_ts["ne"], color="k", lw=3)
ax2.plot(op_ne_ts["psin"], op_ne_ts["ne"], color="tab:purple", lw=2)
ax2.set_title("TS", fontsize=14)
ax2.set_ylim([0, 3e19])
ax2.grid()

# RCP Te plot.
ax3.scatter(rcp["psin"], rcp["te"], marker="^", color="tab:red", edgecolors="k", s=75, zorder=10)
ax3.plot(op_te_rcp["psin"], op_te_rcp["Te"], color="k", zorder=15, lw=3)
ax3.plot(op_te_rcp["psin"], op_te_rcp["Te"], color="tab:red", zorder=20, lw=2)
ax3.set_ylim([0, 80])
ax3.grid(zorder=5)
ax3.set_ylabel(r"$\mathdefault{T_e\ (eV)}$", fontsize=14)
ax3.set_xlabel(r"$\psi_n$", fontsize=14)

# TS Te plot.
ax4.plot(ts["psin"], ts["te"], color="tab:red")
ax4.plot(op_te_ts["psin"], op_te_ts["Te"], color="k", lw=3)
ax4.plot(op_te_ts["psin"], op_te_ts["Te"], color="tab:red", lw=2)
ax4.set_ylim([0, 80])
ax4.grid()
ax4.set_xlabel(r"$\psi_n$", fontsize=14)

fig.tight_layout()
fig.show()


# Another plot to compare the TS and RCP data. Useful for finding out what the shifts should be.
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4), sharex=True)

ax1.axvline(1.0, color="k")
ax1.scatter(rcp["psin"], rcp["ne"], marker="^", color="tab:purple", edgecolors="k", s=75, zorder=10)
ax1.plot(ts["psin"], ts["ne"], color="tab:purple")
ax1.set_ylim([0, 3e19])
ax1.set_xlim([0.9, 1.4])
ax1.grid(zorder=5)

ax2.axvline(1.0, color="k")
ax2.scatter(rcp["psin"], rcp["te"], marker="^", color="tab:red", edgecolors="k", s=75, zorder=10)
ax2.plot(ts["psin"], ts["te"], color="tab:red")
ax2.set_ylim([0, 150])
ax2.grid(zorder=5)

fig.tight_layout()
fig.show()